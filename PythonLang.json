{
    "uuid": "851B1429-B8B4-4C1E-8030-399BDA994393",
    "patterns": [
        {
            "match": "#.*$\\n?",
            "name": "comment.line.hashmark.python"
        },
        {
            "match": "\\b0x\\h+",
            "name": "constant.numeric.integer.hexadecimal.python"
        },
        {
            "match": "\\b0o[0-7]+",
            "name": "constant.numeric.integer.octal.python"
        },
        {
            "match": "(?<=\\W|^)\\.\\d+([eE][+-]?\\d+)?[jJ]?",
            "name": "constant.numeric.float_and_complex.decimal.floatnumber.python"
        },
        {
            "match": "\\d+\\.(\\d+([eE][+-]?\\d+)?)?[jJ]?",
            "name": "constant.numeric.float_and_complex.decimal.pointfloat.python"
        },
        {
            "match": "(?<![\\.\\d])\\d+[eE][+-]?\\d+[jJ]?",
            "name": "constant.numeric.float_and_complex.decimal.exponent.python"
        },
        {
            "match": "\\b(?<!\\.)([1-9]\\d*|0)[jJ]?",
            "name": "constant.numeric.integer_and_complex.decimal.python"
        },
        {
            "match": "\\b(global|nonlocal)\\b",
            "name": "storage.modifier.declaration.python"
        },
        {
            "match": "\\b(import|from)\\b",
            "name": "keyword.control.import_and_import_from.python"
        },
        {
            "match": "\\b(elif|else|except|finally|for|if|try|while|with|break|continue|pass|raise|return|yield)\\b",
            "name": "keyword.control.flow_block_delimiters.python"
        },
        {
            "match": "\\b(and|in|is|not|or)\\b",
            "name": "keyword.operator.bool.logical.python"
        },
        {
            "match": "\\b(as|assert|del)\\b",
            "name": "keyword.other.python"
        },
        {
            "match": "<=|>=|==|<|>|!=",
            "name": "keyword.operator.comparison.python"
        },
        {
            "match": "\\+=|-=|\\*=|/=|//=|%=|&=|\\|=|\\^=|<<=|>>=|\\*\\*=",
            "name": "keyword.operator.assignment.augmented.python"
        },
        {
            "match": "\\+|-|\\*|\\*\\*|/|//|%|<<|>>|&|\\||\\^|~",
            "name": "keyword.operator.arithmetic.python"
        },
        {
            "match": "=|->",
            "name": "keyword.operator.assignment.python"
        },
        {
            "begin": "^\\s*(class)\\s+(?=[a-zA-Z_]\\w*)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.section_and_inheritance.class.python"
                },
                "2": {
                    "name": "invalid.illegal.missing_section_begin.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "storage.type.class.python"
                }
            },
            "patterns": [
                {
                    "include": "#entity_name_class"
                }
            ],
            "end": "((\\(.*\\))?\\s*:)|\\s*($\\n?|#.*$\\n?)",
            "name": "meta.class.python"
        },
        {
            "match": "\\b(None|True|False|Ellipsis|NotImplemented)\\b",
            "name": "constant.language.python"
        }
    ],
    "repository": {
        "line_continuation": {
            "captures": {
                "1": {
                    "name": "punctuation.separator.continuation.line.python"
                },
                "2": {
                    "name": "invalid.illegal.unexpected_text.python"
                }
            },
            "match": "(\\\\)(.*)$\\n?"
        },
        "builtin_types": {
            "match": "(?x)\\b(basestring|bool|buffer|bytearray|bytes|classmethod|complex|dict|enumerate|file|float|frozenset|int|list|memoryview|object|open|property|reversed|set|slice|staticmethod|str|super|tuple|type)\\b",
            "name": "support.type.python"
        },
        "language_variables": {
            "match": "\\b(self|cls)\\b",
            "name": "variable.language.python"
        },
        "generic_names": {
            "match": "[a-zA-Z_]\\w*"
        },
        "entity_name_function": {
            "patterns": [
                {
                    "include": "#magic_function_names"
                },
                {
                    "include": "#illegal_names"
                },
                {
                    "include": "#generic_names"
                }
            ]
        },
        "entity_name_class": {
            "patterns": [
                {
                    "include": "#illegal_names"
                },
                {
                    "include": "#generic_names"
                }
            ]
        },
        "builtin_functions": {
            "match": "(?x)\\b(__import__|abs|all|any|ascii|bin|callable|chr|compile|delattr|dir|divmod|eval|exec|filter|format|getattr|globals|hasattr|hash|help|hex|id|input|isinstance|issubclass|iter|len|locals|map|max|min|next|oct|ord|pow|print|range|repr|round|setattr|sorted|sum|vars|zip)\\b",
            "name": "support.function.builtin.python"
        },
        "magic_variable_names": {
            "match": "\\b__(all|bases|class|debug|dict|doc|file|members|metaclass|mro|name|qualname|slots|weakref)__\\b",
            "name": "support.variable.magic.python"
        },
        "illegal_names": {
            "match": "\\b(and|as|assert|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|raise|return|try|while|with|yield)\\b",
            "name": "invalid.illegal_names.name.python"
        },
        "builtin_exceptions": {
            "match": "(?x)\\b((Arithmetic|Buffer|Lookup|Assertion|Attribute|EOF|FloatingPoint|Import|Index|Key|Memory|Name|NotImplemented|OS|Overflow|Reference|Runtime|Syntax|Indentation|Tab|System|Type|UnboundLocal|Unicode|Unicode(Encode|Decode|Translate)?|Value|ZeroDivision|Environment|IO|VMS|Windows|BlockingIO|ChildProcess|BrokenPipe|Connection(Aborted|Refused|Reset)?|FileExists|FileNotFound|Interrupted|(Is|Not)ADirectory|Permission|ProcessLookup|Timeout)Error|(User|Deprecation|PendingDeprecation|Syntax|Runtime|Future|Import|Bytes|Resource)Warning|(Base)?Exception|(Generator|System)Exit|KeyboardInterrupt|StopIteration|Warning)\\b",
            "name": "support.type.exception.python"
        },
        "magic_function_names": {
            "match": "(?x)\\b(__(?:abs|add|and|bool|bytes|call|ceil|complex|contains|copy|deepcopy|del|delattr|delete|delitem|dir|div|divmod|enter|eq|exit|float|floor|floordiv|format|ge|get|getattr|getattribute|getinitargs|getitem|getnewargs|getstate|gt|hash|hex|iadd|iand|idiv|ifloordiv|ilshift|imul|index|init|instancecheck|int|invert|ior|ipow|irshift|isub|iter|itruediv|ixor|le|len|lshift|lt|metaclass|missing|mod|mul|ne|neg|new|next|oct|or|pos|pow|prepare|radd|rand|rdiv|rdivmod|reduce|reduce_ex|repr|reversed|rfloordiv|rlshift|rmod|rmul|ror|round|rpow|rrshift|rshift|rsub|rtruediv|rxor|set|setattr|setitem|setstate|sizeof|str|sub|subclasscheck|subclasshook|truediv|trunc|unicode|weakref|xor)__)\\b",
            "name": "support.function.magic.python"
        }
    },
    "foldingStopMarker": "^\\s*$|^\\s*\\}|^\\s*\\]|^\\s*\\)|^\\s*\"\"\"\\s*$",
    "scopeName": "source.python",
    "firstLineMatch": "^#!/.*\\bpython[\\d.-]*\\b",
    "comment": "\n\t\tWritten by Peter Varo (c)2013\n\t\thttp://github.com/petervaro/Python3\n\t",
    "foldingStartMarker": "^\\s*(def|class)\\s+([.\\w>]+)\\s*(\\((.*)\\))?\\s*:|\\{\\s*$|\\(\\s*$|\\[\\s*$|^\\s*\"\"\"(?=.)(?!.*\"\"\")",
    "fileTypes": [
        "py"
    ],
    "name": "PythonLang 3"
}